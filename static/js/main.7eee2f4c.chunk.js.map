{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","admin_api_url","getCookie","name","cookieArr","document","cookie","split","i","length","cookiePair","trim","decodeURIComponent","App","className","to","exact","path","component","User","React","Component","Users","props","state","users","token","valid","this","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","error","setState","map","x","todos","username","params","done","todo","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"wOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCbFC,EAAgB,mCAapB,SAASC,EAAUC,GAKjB,IAHA,IAAIC,EAAYC,SAASC,OAAOC,MAAM,KAG7BC,EAAI,EAAGA,EAAIJ,EAAUK,OAAQD,IAAK,CACzC,IAAIE,EAAaN,EAAUI,GAAGD,MAAM,KAIpC,GAAIJ,IAASO,EAAW,GAAGC,OAEzB,OAAOC,mBAAmBF,EAAW,IAKzC,OAAO,KA3BsB,cAA7Bb,OAAOC,SAASC,UACa,cAA7BF,OAAOC,SAASC,WAEhBE,EAAgB,uB,IA2BZY,E,uKAEF,OACE,kBAAC,IAAD,KACE,6BACE,wBAAIC,UAAU,+CACZ,kBAAC,IAAD,CAAMC,GAAG,KAAT,qBAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,kBAAkBC,UAAWC,W,GAZnCC,IAAMC,WAoBlBC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAO,GAAIC,MAAOxB,EAAU,SAAUyB,OAAO,GAF3C,E,gEAIE,IAAD,OACM,MAApBC,KAAKJ,MAAME,OACbG,MAAM5B,EAAgB,SAAU,CAC9B6B,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAER,MAAOE,KAAKJ,MAAME,UAExCS,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACPA,EAAKG,OACR,EAAKC,SAAS,CAAEjB,MAAOa,EAAKb,MAAOE,OAAO,S,+BAMlD,OACE,6BACG,IACD,yBAAKb,UAAWc,KAAKJ,MAAMG,MAAQ,GAAK,aACtC,0BAAMb,UAAU,sBAAhB,SACA,8BACGc,KAAKJ,MAAMC,MAAMkB,KAAI,SAACC,GAAD,OACpB,yBAAK9B,UAAU,gBACb,kBAAC,IAAD,CAAMC,GAAI,QAAU6B,GAAIA,SAKhC,yBAAK9B,UAAWc,KAAKJ,MAAMG,MAAQ,YAAc,IAAjD,4D,GArCYP,IAAMC,WA6CpBF,E,kDACJ,WAAYI,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEqB,MAAO,GAAInB,MAAOxB,EAAU,UAF1B,E,gEAIE,IAAD,OACM,MAApB0B,KAAKJ,MAAME,OACbG,MAAM5B,EAAgB,QAAS,CAC7B6B,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBR,MAAOE,KAAKJ,MAAME,MAClBoB,SAAUlB,KAAKL,MAAMvB,MAAM+C,OAAOD,aAGnCX,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACPA,EAAKG,OACR,EAAKC,SAAS,CAAEG,MAAOP,EAAKb,a,+BAMpC,IAAIqB,EAAWlB,KAAKL,MAAMvB,MAAM+C,OAAOD,SACvC,OACE,6BACE,0BAAMhC,UAAU,sBAAsBgC,GACrClB,KAAKJ,MAAMqB,MAAMF,KAAI,SAACC,GAAD,OACpB,yBAAK9B,UAAW,iBAAmB8B,EAAEI,KAAO,eAAiB,KAC1DJ,EAAEK,c,GAjCI7B,IAAMC,WAyCzB6B,IAASC,OACP,6BACE,kBAAC,EAAD,OAEF9C,SAAS+C,eAAe,SDjBpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjB,GACLF,QAAQE,MAAMA,EAAMkB,c","file":"static/js/main.7eee2f4c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nlet admin_api_url = 'https://vps.scratchyone.com/todo';\n//let todo_http_api_url = 'https://vps.scratchyone.com/admin';\nif (\n  window.location.hostname === 'localhost' ||\n  window.location.hostname === '127.0.0.1'\n)\n  admin_api_url = 'http://localhost:98';\n/*if (\n  window.location.hostname === 'localhost' ||\n  window.location.hostname === '127.0.0.1'\n)\n  //todo_http_api_url = 'http://localhost:100';*/\n\nfunction getCookie(name) {\n  // Split cookie string and get all individual name=value pairs in an array\n  var cookieArr = document.cookie.split(';');\n\n  // Loop through the array elements\n  for (var i = 0; i < cookieArr.length; i++) {\n    var cookiePair = cookieArr[i].split('=');\n\n    /* Removing whitespace at the beginning of the cookie name\n      and compare it with the given string */\n    if (name === cookiePair[0].trim()) {\n      // Decode the cookie value and return\n      return decodeURIComponent(cookiePair[1]);\n    }\n  }\n\n  // Return null if not found\n  return null;\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <h1 className=\"text-3xl pl-4 pt-2 bg-gray-400 rounded-b-lg\">\n            <Link to=\"/\">To-Do Admin Page</Link>\n          </h1>\n          <Switch>\n            <Route exact path=\"/\">\n              <Users />\n            </Route>\n            <Route path=\"/user/:username\" component={User} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nclass Users extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { users: [], token: getCookie('token'), valid: false };\n  }\n  componentDidMount() {\n    if (this.state.token != null) {\n      fetch(admin_api_url + '/users', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify({ token: this.state.token }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          if (!data.error) {\n            this.setState({ users: data.users, valid: true });\n          }\n        });\n    }\n  }\n  render() {\n    return (\n      <div>\n        {' '}\n        <div className={this.state.valid ? '' : 'invisible'}>\n          <span className=\"ml-2 mt-4 text-3xl\">Users</span>\n          <span>\n            {this.state.users.map((x) => (\n              <div className=\"ml-2 lext-md\">\n                <Link to={'user/' + x}>{x}</Link>\n              </div>\n            ))}\n          </span>\n        </div>\n        <div className={this.state.valid ? 'invisible' : ''}>\n          You must be logged in as an admin to view this page\n        </div>\n      </div>\n    );\n  }\n}\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { todos: [], token: getCookie('token') };\n  }\n  componentDidMount() {\n    if (this.state.token != null) {\n      fetch(admin_api_url + '/user', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify({\n          token: this.state.token,\n          username: this.props.match.params.username,\n        }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          if (!data.error) {\n            this.setState({ todos: data.users });\n          }\n        });\n    }\n  }\n  render() {\n    let username = this.props.match.params.username;\n    return (\n      <div>\n        <span className=\"ml-2 mt-4 text-3xl\">{username}</span>\n        {this.state.todos.map((x) => (\n          <div className={'ml-2 lext-md ' + (x.done ? 'line-through' : '')}>\n            {x.todo}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <div>\n    <App></App>\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}