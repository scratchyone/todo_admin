{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","admin_api_url","todo_http_api_url","setCookie","name","value","daysToLive","cookie","encodeURIComponent","document","getCookie","cookieArr","split","i","length","cookiePair","trim","decodeURIComponent","App","className","to","onClick","exact","path","component","User","React","Component","Users","props","passChange","bind","login","state","users","token","valid","this","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","error","setState","event","target","username","password","componentDidMount","map","x","type","onChange","todos","params","done","todo","withRouter","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7e7c72a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  Switch,\n  Route,\n  Link,\n  BrowserRouter,\n  withRouter,\n} from 'react-router-dom';\nlet admin_api_url = 'https://vps.scratchyone.com/admin';\nlet todo_http_api_url = 'https://vps.scratchyone.com/todo';\nif (\n  window.location.hostname === 'localhost' ||\n  window.location.hostname === '127.0.0.1'\n)\n  admin_api_url = 'http://localhost:98';\nif (\n  window.location.hostname === 'localhost' ||\n  window.location.hostname === '127.0.0.1'\n)\n  todo_http_api_url = 'http://localhost:100';\n\nfunction setCookie(name, value, daysToLive) {\n  // Encode value in order to escape semicolons, commas, and whitespace\n  var cookie = name + '=' + encodeURIComponent(value);\n\n  if (typeof daysToLive === 'number') {\n    /* Sets the max-age attribute so that the cookie expires\n      after the specified number of days */\n    cookie += '; max-age=' + daysToLive * 24 * 60 * 60;\n\n    document.cookie = cookie;\n  }\n}\nfunction getCookie(name) {\n  // Split cookie string and get all individual name=value pairs in an array\n  var cookieArr = document.cookie.split(';');\n\n  // Loop through the array elements\n  for (var i = 0; i < cookieArr.length; i++) {\n    var cookiePair = cookieArr[i].split('=');\n\n    /* Removing whitespace at the beginning of the cookie name\n      and compare it with the given string */\n    if (name === cookiePair[0].trim()) {\n      // Decode the cookie value and return\n      return decodeURIComponent(cookiePair[1]);\n    }\n  }\n\n  // Return null if not found\n  return null;\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"bg-gray-400 rounded-b-lg w-full\">\n          <span className=\"text-3xl pl-4 pt-2\">\n            <Link to=\"/\">To-Do Admin Page</Link>\n          </span>\n          <button\n            onClick={() => {\n              setCookie('token', null, 10);\n            }}\n            className=\"text-1xl pl-4 pt-2\"\n          >\n            Logout\n          </button>\n        </div>\n        <Switch>\n          <Route exact path=\"/\">\n            <Users />\n          </Route>\n          <Route path=\"/user/:username\" component={User} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nclass Users extends React.Component {\n  constructor(props) {\n    super(props);\n    this.passChange = this.passChange.bind(this);\n    this.login = this.login.bind(this);\n    this.state = {\n      users: [],\n      token: getCookie('token'),\n      valid: null,\n      value: '',\n    };\n  }\n  componentDidMount() {\n    if (this.state.token != null) {\n      fetch(admin_api_url + '/users', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify({ token: this.state.token }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          if (!data.error) {\n            this.setState({ users: data.users, valid: true });\n          } else {\n            this.setState({ valid: false });\n          }\n        });\n    } else {\n      this.setState({ valid: false });\n    }\n  }\n  passChange(event) {\n    this.setState({ value: event.target.value });\n  }\n  login() {\n    fetch(todo_http_api_url + '/login', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify({ username: 'admin', password: this.state.value }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        if (!data.error) {\n          this.setState({ token: data.response.token, valid: true });\n          setCookie('token', data.response.token, 10);\n          this.componentDidMount();\n        }\n      });\n  }\n  render() {\n    return (\n      <div>\n        <div className={this.state.valid !== false ? '' : 'invisible'}>\n          <span className=\"ml-2 mt-4 text-3xl\">Users</span>\n          <span>\n            {this.state.users.map((x) => (\n              <div className=\"ml-2 lext-md\">\n                <Link to={'user/' + x}>{x}</Link>\n              </div>\n            ))}\n          </span>\n        </div>\n        <div className={this.state.valid === false ? '' : 'invisible'}>\n          You must be logged in as an admin to view this page<br></br>\n          <input\n            type=\"password\"\n            value={this.state.value}\n            onChange={this.passChange}\n            className=\"m-2 border rounded-sm border-black border-5\"\n          ></input>\n          <button\n            onClick={this.login}\n            className=\"m-2 border rounded-sm border-black border-5 bg-gray-100\"\n          >\n            Login\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { todos: [], token: getCookie('token') };\n  }\n  componentDidMount() {\n    if (this.state.token != null) {\n      fetch(admin_api_url + '/user', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify({\n          token: this.state.token,\n          username: this.props.match.params.username,\n        }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          if (!data.error) {\n            this.setState({ todos: data.users });\n          }\n        });\n    }\n  }\n  render() {\n    let username = this.props.match.params.username;\n    return (\n      <div>\n        <span className=\"ml-2 mt-4 text-3xl\">{username}</span>\n        {this.state.todos.map((x) => (\n          <div className={'ml-2 lext-md ' + (x.done ? 'line-through' : '')}>\n            {x.todo}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\nApp = withRouter(App);\nReactDOM.render(\n  <BrowserRouter basename=\"/todo_admin\">\n    <div>\n      <App />\n    </div>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}